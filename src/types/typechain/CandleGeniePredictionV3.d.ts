/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { EventFragment, FunctionFragment, Result } from "@ethersproject/abi";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  CallOverrides,
  ContractTransaction,
  ethers,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
} from "ethers";
import { TypedEvent, TypedEventFilter, TypedListener } from "./commons";

interface CandleGeniePredictionV3Interface extends ethers.utils.Interface {
  functions: {
    "Bets(uint256,address)": FunctionFragment;
    "OwnershipRenounce()": FunctionFragment;
    "OwnershipTransfer(address)": FunctionFragment;
    "Rounds(uint256)": FunctionFragment;
    "UserBets(address,uint256)": FunctionFragment;
    "_owner()": FunctionFragment;
    "bufferSeconds()": FunctionFragment;
    "claimable(uint256,address)": FunctionFragment;
    "control_Pause()": FunctionFragment;
    "control_Resume()": FunctionFragment;
    "control_RoundCancel(uint256,bool,bool)": FunctionFragment;
    "control_RoundExecute(int256,uint32)": FunctionFragment;
    "control_RoundLock(int256,uint32)": FunctionFragment;
    "control_RoundStart()": FunctionFragment;
    "currentBlockNumber()": FunctionFragment;
    "currentBlockTimestamp()": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "getUserRounds(address,uint256,uint256)": FunctionFragment;
    "getUserRoundsLength(address)": FunctionFragment;
    "intervalSeconds()": FunctionFragment;
    "lockOnce()": FunctionFragment;
    "minBetAmount()": FunctionFragment;
    "operatorAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "owner_BlackListInsert(address)": FunctionFragment;
    "owner_BlackListRemove(address)": FunctionFragment;
    "owner_ChangePriceSource(string)": FunctionFragment;
    "owner_FundsExtract(uint256)": FunctionFragment;
    "owner_FundsInject()": FunctionFragment;
    "owner_HouseBet(uint256,uint256)": FunctionFragment;
    "owner_RewardUser(address,uint256)": FunctionFragment;
    "owner_SetOperator(address)": FunctionFragment;
    "paused()": FunctionFragment;
    "priceSource()": FunctionFragment;
    "refundable(uint256,address)": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "setBufferAndIntervalSeconds(uint256,uint256)": FunctionFragment;
    "settings_SetMinBetAmount(uint256)": FunctionFragment;
    "settings_SetRewardRate(uint256)": FunctionFragment;
    "startOnce()": FunctionFragment;
    "user_BetBear(uint256)": FunctionFragment;
    "user_BetBull(uint256)": FunctionFragment;
    "user_Claim(uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "Bets",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "OwnershipRenounce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OwnershipTransfer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "Rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UserBets",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "bufferSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "control_Pause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "control_Resume",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "control_RoundCancel",
    values: [BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "control_RoundExecute",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "control_RoundLock",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "control_RoundStart",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBlockNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentBlockTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRounds",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoundsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "intervalSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lockOnce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "owner_BlackListInsert",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "owner_BlackListRemove",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "owner_ChangePriceSource",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "owner_FundsExtract",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "owner_FundsInject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "owner_HouseBet",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "owner_RewardUser",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "owner_SetOperator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "priceSource",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refundable",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBufferAndIntervalSeconds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settings_SetMinBetAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "settings_SetRewardRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "startOnce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "user_BetBear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_BetBull",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "user_Claim",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "Bets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OwnershipRenounce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OwnershipTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UserBets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bufferSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "control_Pause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "control_Resume",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "control_RoundCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "control_RoundExecute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "control_RoundLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "control_RoundStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBlockNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentBlockTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoundsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "intervalSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockOnce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "owner_BlackListInsert",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "owner_BlackListRemove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "owner_ChangePriceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "owner_FundsExtract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "owner_FundsInject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "owner_HouseBet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "owner_RewardUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "owner_SetOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "priceSource",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundable", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBufferAndIntervalSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settings_SetMinBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settings_SetRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startOnce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "user_BetBear",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "user_BetBull",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "user_Claim", data: BytesLike): Result;

  events: {
    "BetBear(address,uint256,uint256)": EventFragment;
    "BetBull(address,uint256,uint256)": EventFragment;
    "BufferAndIntervalSecondsUpdated(uint256,uint256)": EventFragment;
    "CancelRound(uint256)": EventFragment;
    "Claim(address,uint256,uint256)": EventFragment;
    "EndRound(uint256,int256,uint32)": EventFragment;
    "HouseBet(address,uint256,uint256,uint256)": EventFragment;
    "InjectFunds(address)": EventFragment;
    "LockRound(uint256,int256,uint32)": EventFragment;
    "MinBetAmountUpdated(uint256,uint256)": EventFragment;
    "NewPriceSource(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardsCalculated(uint256,uint256,uint256)": EventFragment;
    "StartRound(uint256)": EventFragment;
    "Unpause(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetBear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetBull"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BufferAndIntervalSecondsUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HouseBet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InjectFunds"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinBetAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewPriceSource"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsCalculated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type BetBearEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    epoch: BigNumber;
    amount: BigNumber;
  }
>;

export type BetBullEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    epoch: BigNumber;
    amount: BigNumber;
  }
>;

export type BufferAndIntervalSecondsUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    bufferSeconds: BigNumber;
    intervalSeconds: BigNumber;
  }
>;

export type CancelRoundEvent = TypedEvent<[BigNumber] & { epoch: BigNumber }>;

export type ClaimEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    sender: string;
    epoch: BigNumber;
    amount: BigNumber;
  }
>;

export type EndRoundEvent = TypedEvent<
  [BigNumber, BigNumber, number] & {
    epoch: BigNumber;
    price: BigNumber;
    timestamp: number;
  }
>;

export type HouseBetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber] & {
    sender: string;
    epoch: BigNumber;
    bullAmount: BigNumber;
    bearAmount: BigNumber;
  }
>;

export type InjectFundsEvent = TypedEvent<[string] & { sender: string }>;

export type LockRoundEvent = TypedEvent<
  [BigNumber, BigNumber, number] & {
    epoch: BigNumber;
    price: BigNumber;
    timestamp: number;
  }
>;

export type MinBetAmountUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { epoch: BigNumber; minBetAmount: BigNumber }
>;

export type NewPriceSourceEvent = TypedEvent<
  [string] & { priceSource: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PauseEvent = TypedEvent<[BigNumber] & { epoch: BigNumber }>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type RewardsCalculatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    epoch: BigNumber;
    rewardBaseCalAmount: BigNumber;
    rewardAmount: BigNumber;
  }
>;

export type StartRoundEvent = TypedEvent<[BigNumber] & { epoch: BigNumber }>;

export type UnpauseEvent = TypedEvent<[BigNumber] & { epoch: BigNumber }>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class CandleGeniePredictionV3 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CandleGeniePredictionV3Interface;

  functions: {
    Bets(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    OwnershipRenounce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    OwnershipTransfer(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    Rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        boolean,
        boolean
      ] & {
        epoch: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        lockPrice: BigNumber;
        closePrice: BigNumber;
        startTimestamp: number;
        lockTimestamp: number;
        closeTimestamp: number;
        lockPriceTimestamp: number;
        closePriceTimestamp: number;
        closed: boolean;
        cancelled: boolean;
      }
    >;

    UserBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _owner(overrides?: CallOverrides): Promise<[string]>;

    bufferSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    control_Pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    control_Resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    control_RoundCancel(
      epoch: BigNumberish,
      cancelled: boolean,
      closed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    control_RoundExecute(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    control_RoundLock(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    control_RoundStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentBlockNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentBlockTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([number, BigNumber, boolean] & {
          position: number;
          amount: BigNumber;
          claimed: boolean;
        })[],
        BigNumber
      ]
    >;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    intervalSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockOnce(overrides?: CallOverrides): Promise<[boolean]>;

    minBetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    owner_BlackListInsert(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner_BlackListRemove(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner_ChangePriceSource(
      _priceSource: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner_FundsExtract(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner_FundsInject(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner_HouseBet(
      bullAmount: BigNumberish,
      bearAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner_RewardUser(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner_SetOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    priceSource(overrides?: CallOverrides): Promise<[string]>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBufferAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settings_SetMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settings_SetRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    startOnce(overrides?: CallOverrides): Promise<[boolean]>;

    user_BetBear(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    user_BetBull(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    user_Claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  Bets(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, boolean] & {
      position: number;
      amount: BigNumber;
      claimed: boolean;
    }
  >;

  OwnershipRenounce(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  OwnershipTransfer(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  Rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      number,
      number,
      number,
      number,
      boolean,
      boolean
    ] & {
      epoch: BigNumber;
      bullAmount: BigNumber;
      bearAmount: BigNumber;
      rewardBaseCalAmount: BigNumber;
      rewardAmount: BigNumber;
      lockPrice: BigNumber;
      closePrice: BigNumber;
      startTimestamp: number;
      lockTimestamp: number;
      closeTimestamp: number;
      lockPriceTimestamp: number;
      closePriceTimestamp: number;
      closed: boolean;
      cancelled: boolean;
    }
  >;

  UserBets(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _owner(overrides?: CallOverrides): Promise<string>;

  bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  claimable(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  control_Pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  control_Resume(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  control_RoundCancel(
    epoch: BigNumberish,
    cancelled: boolean,
    closed: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  control_RoundExecute(
    price: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  control_RoundLock(
    price: BigNumberish,
    timestamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  control_RoundStart(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

  currentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  getUserRounds(
    user: string,
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      })[],
      BigNumber
    ]
  >;

  getUserRoundsLength(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  lockOnce(overrides?: CallOverrides): Promise<boolean>;

  minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  owner_BlackListInsert(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner_BlackListRemove(
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner_ChangePriceSource(
    _priceSource: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner_FundsExtract(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner_FundsInject(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner_HouseBet(
    bullAmount: BigNumberish,
    bearAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner_RewardUser(
    user: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner_SetOperator(
    _operatorAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  priceSource(overrides?: CallOverrides): Promise<string>;

  refundable(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  setBufferAndIntervalSeconds(
    _bufferSeconds: BigNumberish,
    _intervalSeconds: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settings_SetMinBetAmount(
    _minBetAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settings_SetRewardRate(
    _rewardRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  startOnce(overrides?: CallOverrides): Promise<boolean>;

  user_BetBear(
    epoch: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  user_BetBull(
    epoch: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  user_Claim(
    epochs: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    Bets(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    OwnershipRenounce(overrides?: CallOverrides): Promise<void>;

    OwnershipTransfer(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    Rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        boolean,
        boolean
      ] & {
        epoch: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        lockPrice: BigNumber;
        closePrice: BigNumber;
        startTimestamp: number;
        lockTimestamp: number;
        closeTimestamp: number;
        lockPriceTimestamp: number;
        closePriceTimestamp: number;
        closed: boolean;
        cancelled: boolean;
      }
    >;

    UserBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<string>;

    bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    control_Pause(overrides?: CallOverrides): Promise<void>;

    control_Resume(overrides?: CallOverrides): Promise<void>;

    control_RoundCancel(
      epoch: BigNumberish,
      cancelled: boolean,
      closed: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    control_RoundExecute(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    control_RoundLock(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    control_RoundStart(overrides?: CallOverrides): Promise<void>;

    currentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    currentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([number, BigNumber, boolean] & {
          position: number;
          amount: BigNumber;
          claimed: boolean;
        })[],
        BigNumber
      ]
    >;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    lockOnce(overrides?: CallOverrides): Promise<boolean>;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    owner_BlackListInsert(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner_BlackListRemove(
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner_ChangePriceSource(
      _priceSource: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner_FundsExtract(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner_FundsInject(overrides?: CallOverrides): Promise<void>;

    owner_HouseBet(
      bullAmount: BigNumberish,
      bearAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner_RewardUser(
      user: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner_SetOperator(
      _operatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    priceSource(overrides?: CallOverrides): Promise<string>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    setBufferAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settings_SetMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    settings_SetRewardRate(
      _rewardRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    startOnce(overrides?: CallOverrides): Promise<boolean>;

    user_BetBear(epoch: BigNumberish, overrides?: CallOverrides): Promise<void>;

    user_BetBull(epoch: BigNumberish, overrides?: CallOverrides): Promise<void>;

    user_Claim(
      epochs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BetBear(address,uint256,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; epoch: BigNumber; amount: BigNumber }
    >;

    BetBear(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; epoch: BigNumber; amount: BigNumber }
    >;

    "BetBull(address,uint256,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; epoch: BigNumber; amount: BigNumber }
    >;

    BetBull(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; epoch: BigNumber; amount: BigNumber }
    >;

    "BufferAndIntervalSecondsUpdated(uint256,uint256)"(
      bufferSeconds?: null,
      intervalSeconds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { bufferSeconds: BigNumber; intervalSeconds: BigNumber }
    >;

    BufferAndIntervalSecondsUpdated(
      bufferSeconds?: null,
      intervalSeconds?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { bufferSeconds: BigNumber; intervalSeconds: BigNumber }
    >;

    "CancelRound(uint256)"(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    CancelRound(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    "Claim(address,uint256,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; epoch: BigNumber; amount: BigNumber }
    >;

    Claim(
      sender?: string | null,
      epoch?: BigNumberish | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { sender: string; epoch: BigNumber; amount: BigNumber }
    >;

    "EndRound(uint256,int256,uint32)"(
      epoch?: BigNumberish | null,
      price?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      { epoch: BigNumber; price: BigNumber; timestamp: number }
    >;

    EndRound(
      epoch?: BigNumberish | null,
      price?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      { epoch: BigNumber; price: BigNumber; timestamp: number }
    >;

    "HouseBet(address,uint256,uint256,uint256)"(
      sender?: string | null,
      epoch?: BigNumberish | null,
      bullAmount?: null,
      bearAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        epoch: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
      }
    >;

    HouseBet(
      sender?: string | null,
      epoch?: BigNumberish | null,
      bullAmount?: null,
      bearAmount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, BigNumber],
      {
        sender: string;
        epoch: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
      }
    >;

    "InjectFunds(address)"(
      sender?: string | null
    ): TypedEventFilter<[string], { sender: string }>;

    InjectFunds(
      sender?: string | null
    ): TypedEventFilter<[string], { sender: string }>;

    "LockRound(uint256,int256,uint32)"(
      epoch?: BigNumberish | null,
      price?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      { epoch: BigNumber; price: BigNumber; timestamp: number }
    >;

    LockRound(
      epoch?: BigNumberish | null,
      price?: null,
      timestamp?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number],
      { epoch: BigNumber; price: BigNumber; timestamp: number }
    >;

    "MinBetAmountUpdated(uint256,uint256)"(
      epoch?: BigNumberish | null,
      minBetAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; minBetAmount: BigNumber }
    >;

    MinBetAmountUpdated(
      epoch?: BigNumberish | null,
      minBetAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { epoch: BigNumber; minBetAmount: BigNumber }
    >;

    "NewPriceSource(string)"(
      priceSource?: null
    ): TypedEventFilter<[string], { priceSource: string }>;

    NewPriceSource(
      priceSource?: null
    ): TypedEventFilter<[string], { priceSource: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Pause(uint256)"(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    Pause(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "RewardsCalculated(uint256,uint256,uint256)"(
      epoch?: BigNumberish | null,
      rewardBaseCalAmount?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        epoch: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
      }
    >;

    RewardsCalculated(
      epoch?: BigNumberish | null,
      rewardBaseCalAmount?: null,
      rewardAmount?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        epoch: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
      }
    >;

    "StartRound(uint256)"(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    StartRound(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    "Unpause(uint256)"(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    Unpause(
      epoch?: BigNumberish | null
    ): TypedEventFilter<[BigNumber], { epoch: BigNumber }>;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    Bets(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    OwnershipRenounce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    OwnershipTransfer(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    Rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    UserBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    control_Pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    control_Resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    control_RoundCancel(
      epoch: BigNumberish,
      cancelled: boolean,
      closed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    control_RoundExecute(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    control_RoundLock(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    control_RoundStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentBlockNumber(overrides?: CallOverrides): Promise<BigNumber>;

    currentBlockTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    lockOnce(overrides?: CallOverrides): Promise<BigNumber>;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    owner_BlackListInsert(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner_BlackListRemove(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner_ChangePriceSource(
      _priceSource: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner_FundsExtract(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner_FundsInject(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner_HouseBet(
      bullAmount: BigNumberish,
      bearAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner_RewardUser(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner_SetOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    priceSource(overrides?: CallOverrides): Promise<BigNumber>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    setBufferAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settings_SetMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settings_SetRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    startOnce(overrides?: CallOverrides): Promise<BigNumber>;

    user_BetBear(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    user_BetBull(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    user_Claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    Bets(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OwnershipRenounce(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    OwnershipTransfer(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    Rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UserBets(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bufferSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    control_Pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    control_Resume(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    control_RoundCancel(
      epoch: BigNumberish,
      cancelled: boolean,
      closed: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    control_RoundExecute(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    control_RoundLock(
      price: BigNumberish,
      timestamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    control_RoundStart(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentBlockNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentBlockTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    intervalSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockOnce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner_BlackListInsert(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner_BlackListRemove(
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner_ChangePriceSource(
      _priceSource: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner_FundsExtract(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner_FundsInject(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner_HouseBet(
      bullAmount: BigNumberish,
      bearAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner_RewardUser(
      user: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner_SetOperator(
      _operatorAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    priceSource(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBufferAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settings_SetMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settings_SetRewardRate(
      _rewardRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    startOnce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    user_BetBear(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    user_BetBull(
      epoch: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    user_Claim(
      epochs: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
